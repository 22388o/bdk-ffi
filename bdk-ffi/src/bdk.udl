namespace bdk {};

// ------------------------------------------------------------------------
// bdk crate - types module
// ------------------------------------------------------------------------

enum KeychainKind {
  "External",
  "Internal",
};

dictionary AddressInfo {
  u32 index;
  Address address;
  KeychainKind keychain;
};

[Enum]
interface AddressIndex {
  New();
  LastUnused();
  Peek(u32 index);
};

dictionary Balance {
  u64 immature;

  u64 trusted_pending;

  u64 untrusted_pending;

  u64 confirmed;

  u64 trusted_spendable;

  u64 total;
};

dictionary LocalUtxo {
  OutPoint outpoint;
  TxOut txout;
  KeychainKind keychain;
  boolean is_spent;
};

dictionary TxOut {
  u64 value;
  Script script_pubkey;
};

// ------------------------------------------------------------------------
// bdk crate - wallet module
// ------------------------------------------------------------------------

[Error]
enum BdkError {
  "Generic",
  "NoRecipients",
  "NoUtxosSelected",
  "OutputBelowDustLimit",
  "InsufficientFunds",
  "BnBTotalTriesExceeded",
  "BnBNoExactMatch",
  "UnknownUtxo",
  "TransactionNotFound",
  "TransactionConfirmed",
  "IrreplaceableTransaction",
  "FeeRateTooLow",
  "FeeTooLow",
  "FeeRateUnavailable",
  "MissingKeyOrigin",
  "Key",
  "ChecksumMismatch",
  "SpendingPolicyRequired",
  "InvalidPolicyPathError",
  "Signer",
  "InvalidOutpoint",
  "Descriptor",
  "Miniscript",
  "MiniscriptPsbt",
  "Bip32",
  "Psbt",
};

enum ChangeSpendPolicy {
  "ChangeAllowed",
  "OnlyChange",
  "ChangeForbidden"
};

interface Wallet {
  [Name=new_no_persist, Throws=BdkError]
  constructor(Descriptor descriptor, Descriptor? change_descriptor, Network network);

  AddressInfo get_address(AddressIndex address_index);

  AddressInfo get_internal_address(AddressIndex address_index);

  Network network();

  Balance get_balance();

  boolean is_mine(Script script);

  [Throws=BdkError]
  void apply_update(Update update);

  [Throws=BdkError]
  boolean sign(PartiallySignedTransaction psbt);

  SentAndReceivedValues sent_and_received([ByRef] Transaction tx);

  sequence<Transaction> transactions();
};

interface Update {};

interface TxBuilder {
  constructor();

  TxBuilder add_recipient(Script script, u64 amount);

  TxBuilder set_recipients(sequence<ScriptAmount> recipients);

  TxBuilder add_unspendable(OutPoint unspendable);

  TxBuilder unspendable(sequence<OutPoint> unspendable);

  TxBuilder add_utxo(OutPoint outpoint);

  TxBuilder change_policy(ChangeSpendPolicy change_policy);

  TxBuilder do_not_spend_change();

  TxBuilder only_spend_change();

  TxBuilder manually_selected_only();

  TxBuilder fee_rate(float sat_per_vbyte);

  TxBuilder fee_absolute(u64 fee);

  TxBuilder drain_wallet();

  TxBuilder drain_to(Script script);

  TxBuilder enable_rbf();

  TxBuilder enable_rbf_with_sequence(u32 nsequence);

  [Throws=BdkError]
  PartiallySignedTransaction finish([ByRef] Wallet wallet);
};

interface BumpFeeTxBuilder {
  constructor(string txid, f32 fee_rate);

  BumpFeeTxBuilder allow_shrinking(Script script_pubkey);

  BumpFeeTxBuilder enable_rbf();

  BumpFeeTxBuilder enable_rbf_with_sequence(u32 nsequence);

  [Throws=BdkError]
  PartiallySignedTransaction finish([ByRef] Wallet wallet);
};

// ------------------------------------------------------------------------
// bdk crate - descriptor module
// ------------------------------------------------------------------------

interface Mnemonic {
  constructor(WordCount word_count);

  [Name=from_string, Throws=BdkError]
  constructor(string mnemonic);

  [Name=from_entropy, Throws=BdkError]
  constructor(sequence<u8> entropy);

  string as_string();
};

interface DerivationPath {
  [Throws=BdkError]
  constructor(string path);
};

interface DescriptorSecretKey {
  constructor(Network network, Mnemonic mnemonic, string? password);

  [Name=from_string, Throws=BdkError]
  constructor(string secret_key);

  [Throws=BdkError]
  DescriptorSecretKey derive(DerivationPath path);

  [Throws=BdkError]
  DescriptorSecretKey extend(DerivationPath path);

  DescriptorPublicKey as_public();

  sequence<u8> secret_bytes();

  string as_string();
};

interface DescriptorPublicKey {
  [Name=from_string, Throws=BdkError]
  constructor(string public_key);

  [Throws=BdkError]
  DescriptorPublicKey derive(DerivationPath path);

  [Throws=BdkError]
  DescriptorPublicKey extend(DerivationPath path);

  string as_string();
};

interface Descriptor {
  [Throws=BdkError]
  constructor(string descriptor, Network network);

  [Name=new_bip44]
  constructor(DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip44_public]
  constructor(DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip49]
  constructor(DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip49_public]
  constructor(DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip84]
  constructor(DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip84_public]
  constructor(DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip86]
  constructor(DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip86_public]
  constructor(DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  string as_string();

  string as_string_private();
};

// ------------------------------------------------------------------------
// bdk_esplora crate
// ------------------------------------------------------------------------

interface EsploraClient {
  constructor(string url);

  [Throws=BdkError]
  Update scan(Wallet wallet, u64 stop_gap, u64 parallel_requests);

  [Throws=BdkError]
  void broadcast(Transaction transaction);
};

// ------------------------------------------------------------------------
// bdk-ffi-defined types
// ------------------------------------------------------------------------

dictionary ScriptAmount {
  Script script;
  u64 amount;
};

dictionary SentAndReceivedValues {
    u64 sent;
    u64 received;
};

// ------------------------------------------------------------------------
// bdk crate - bitcoin re-exports
// ------------------------------------------------------------------------

interface Script {
  constructor(sequence<u8> raw_output_script);

  sequence<u8> to_bytes();
};

enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
};

enum WordCount {
  "Words12",
  "Words15",
  "Words18",
  "Words21",
  "Words24",
};

interface Address {
  [Throws=BdkError]
  constructor(string address, Network network);

  Network network();

  Script script_pubkey();

  string to_qr_uri();

  string as_string();
};

interface Transaction {
  [Throws=BdkError]
  constructor(sequence<u8> transaction_bytes);

  string txid();

  u64 size();

  u64 vsize();

  boolean is_coin_base();

  boolean is_explicitly_rbf();

  boolean is_lock_time_enabled();

  i32 version();
};

interface PartiallySignedTransaction {
  [Throws=BdkError]
  constructor(string psbt_base64);

  string serialize();

  Transaction extract_tx();
};

dictionary OutPoint {
  string txid;
  u32 vout;
};
